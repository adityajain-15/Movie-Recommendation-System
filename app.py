# -*- coding: utf-8 -*-
"""1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mASJkR8AuTuCkwAQg64zZwQe-Y7JhX1H
"""

# !pip install kagglehub pandas numpy scikit-learn gradio requests
# !pip install --upgrade kagglehub

import kagglehub
import pandas as pd
import numpy as np
import ast
import pickle
import requests
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import gradio as gr
import warnings
warnings.filterwarnings('ignore')

import kagglehub
import pandas as pd
import numpy as np
import ast
import pickle
import requests
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import gradio as gr
import warnings
warnings.filterwarnings('ignore')

# Download the dataset using kagglehub
print("Downloading TMDB movie dataset...")
path = kagglehub.dataset_download("tmdb/tmdb-movie-metadata")
print(f"Dataset downloaded to: {path}")

# Load the CSV files
movies = pd.read_csv(f"{path}/tmdb_5000_movies.csv")
credits = pd.read_csv(f"{path}/tmdb_5000_credits.csv")

print(f"Movies dataset shape: {movies.shape}")
print(f"Credits dataset shape: {credits.shape}")

# Display first few rows
print("\nFirst 2 rows of movies dataset:")
movies.head(2)

# Display credits dataset
print("First 2 rows of credits dataset:")
credits.head(2)

# Merge movies and credits datasets
movies = movies.merge(credits, on='title')
print(f"Merged dataset shape: {movies.shape}")

# Select relevant columns
movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]
print("\nSelected columns:")
movies.head()

# Define helper functions for data preprocessing

def convert(text):
    """Convert JSON string to list of names"""
    L = []
    for i in ast.literal_eval(text):
        L.append(i['name'])
    return L

def convert3(text):
    """Convert JSON string to list of first 3 names"""
    L = []
    counter = 0
    for i in ast.literal_eval(text):
        if counter < 3:
            L.append(i['name'])
        counter += 1
    return L

def fetch_director(text):
    """Extract director names from crew data"""
    L = []
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            L.append(i['name'])
    return L

def collapse(L):
    """Remove spaces from list items"""
    L1 = []
    for i in L:
        L1.append(i.replace(" ",""))
    return L1

print("Helper functions defined successfully!")

# Remove null values
movies.dropna(inplace=True)
print(f"Dataset shape after removing null values: {movies.shape}")

# Process genres
movies['genres'] = movies['genres'].apply(convert)
print("Genres processed")

# Process keywords
movies['keywords'] = movies['keywords'].apply(convert)
print("Keywords processed")

# Process cast (top 3 actors)
movies['cast'] = movies['cast'].apply(convert)
movies['cast'] = movies['cast'].apply(lambda x: x[0:3])
print("Cast processed")

# Process crew (directors only)
movies['crew'] = movies['crew'].apply(fetch_director)
print("Crew processed")

# Display sample data
print("\nSample processed data:")
movies.sample(3)

# Remove spaces from all text data
movies['cast'] = movies['cast'].apply(collapse)
movies['crew'] = movies['crew'].apply(collapse)
movies['genres'] = movies['genres'].apply(collapse)
movies['keywords'] = movies['keywords'].apply(collapse)

# Convert overview to list of words
movies['overview'] = movies['overview'].apply(lambda x: x.split())

# Create tags by combining all features
movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

# Create final dataset
new = movies.drop(columns=['overview','genres','keywords','cast','crew'])
new['tags'] = new['tags'].apply(lambda x: " ".join(x))

print(f"Final dataset shape: {new.shape}")
print("\nFinal processed data:")
new.head()

# Create count vectorizer
cv = CountVectorizer(max_features=5000, stop_words='english')
vector = cv.fit_transform(new['tags']).toarray()
print(f"Vector shape: {vector.shape}")

# Calculate cosine similarity
similarity = cosine_similarity(vector)
print(f"Similarity matrix shape: {similarity.shape}")

print("\nModel created successfully!")

# Basic recommendation function
def recommend(movie):
    """Recommend movies based on similarity"""
    try:
        index = new[new['title'] == movie].index[0]
        distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])
        recommended_movies = []

        print(f"\nRecommendations for '{movie}':")
        print("-" * 50)

        for i in distances[1:6]:
            movie_title = new.iloc[i[0]].title
            similarity_score = round(i[1] * 100, 2)
            print(f"{len(recommended_movies)+1}. {movie_title} (Similarity: {similarity_score}%)")
            recommended_movies.append(movie_title)

        return recommended_movies
    except IndexError:
        print(f"Movie '{movie}' not found in the database.")
        return []

# Test the recommendation function
test_recommendations = recommend('Avatar')

# Test recommendations for different movies
test_movies = ['The Dark Knight', 'Titanic', 'Avatar', 'Iron Man', 'Gandhi']

for movie in test_movies:
    if movie in new['title'].values:
        recommend(movie)
        print("\n")
    else:
        print(f"'{movie}' not found in dataset")

# Download the dataset using kagglehub
print("Downloading TMDB movie dataset...")
path = kagglehub.dataset_download("tmdb/tmdb-movie-metadata")
print(f"Dataset downloaded to: {path}")

# Load the CSV files
movies = pd.read_csv(f"{path}/tmdb_5000_movies.csv")
credits = pd.read_csv(f"{path}/tmdb_5000_credits.csv")

print(f"Movies dataset shape: {movies.shape}")
print(f"Credits dataset shape: {credits.shape}")

# Merge datasets
movies = movies.merge(credits, on='title')
movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

# Define helper functions
def convert(text):
    L = []
    for i in ast.literal_eval(text):
        L.append(i['name'])
    return L

def fetch_director(text):
    L = []
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            L.append(i['name'])
    return L

def collapse(L):
    L1 = []
    for i in L:
        L1.append(i.replace(" ",""))
    return L1

# Process data
movies.dropna(inplace=True)
movies['genres'] = movies['genres'].apply(convert)
movies['keywords'] = movies['keywords'].apply(convert)
movies['cast'] = movies['cast'].apply(convert)
movies['cast'] = movies['cast'].apply(lambda x: x[0:3])
movies['crew'] = movies['crew'].apply(fetch_director)

movies['cast'] = movies['cast'].apply(collapse)
movies['crew'] = movies['crew'].apply(collapse)
movies['genres'] = movies['genres'].apply(collapse)
movies['keywords'] = movies['keywords'].apply(collapse)

movies['overview'] = movies['overview'].apply(lambda x: x.split())
movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

new = movies.drop(columns=['overview','genres','keywords','cast','crew'])
new['tags'] = new['tags'].apply(lambda x: " ".join(x))

print(f"Final dataset shape: {new.shape}")
print("Data preprocessing completed!")
new.head()

# Create count vectorizer and similarity matrix
cv = CountVectorizer(max_features=5000, stop_words='english')
vector = cv.fit_transform(new['tags']).toarray()
similarity = cosine_similarity(vector)

print(f"Vector shape: {vector.shape}")
print(f"Similarity matrix shape: {similarity.shape}")
print("Model created successfully!")

# Enhanced poster fetching function
def fetch_poster(movie_id):
    """Fetch movie poster from TMDB API"""
    try:
        url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US"
        response = requests.get(url)
        data = response.json()

        if 'poster_path' in data and data['poster_path']:
            poster_url = "https://image.tmdb.org/t/p/w500" + data['poster_path']
            return poster_url
        else:
            return "https://via.placeholder.com/500x750/1f2937/ffffff?text=No+Image+Available"
    except:
        return "https://via.placeholder.com/500x750/1f2937/ffffff?text=No+Image+Available"

# Get movie details
def get_movie_details(movie_title):
    """Get additional movie details"""
    try:
        movie_row = new[new['title'] == movie_title].iloc[0]
        movie_id = movie_row['movie_id']

        # Fetch additional details from TMDB API
        url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US"
        response = requests.get(url)
        data = response.json()

        details = {
            'title': movie_title,
            'year': data.get('release_date', 'N/A')[:4] if data.get('release_date') else 'N/A',
            'rating': data.get('vote_average', 'N/A'),
            'genres': ', '.join([genre['name'] for genre in data.get('genres', [])]),
            'overview': data.get('overview', 'No overview available'),
            'runtime': f"{data.get('runtime', 'N/A')} min" if data.get('runtime') else 'N/A',
            'poster_url': fetch_poster(movie_id)
        }
        return details
    except:
        return {
            'title': movie_title,
            'year': 'N/A',
            'rating': 'N/A',
            'genres': 'N/A',
            'overview': 'Details not available',
            'runtime': 'N/A',
            'poster_url': "https://via.placeholder.com/500x750/1f2937/ffffff?text=No+Image+Available"
        }

# Enhanced recommendation function
def enhanced_recommend(movie_name):
    """Enhanced recommendation with movie details and posters"""
    if not movie_name:
        return None, "Please select a movie first!", ""

    if movie_name not in new['title'].values:
        return None, f"Movie '{movie_name}' not found in database.", ""

    try:
        # Get selected movie details
        selected_movie_details = get_movie_details(movie_name)

        # Get recommendations
        index = new[new['title'] == movie_name].index[0]
        distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])

        # Create HTML for selected movie
        poster_url = selected_movie_details['poster_url']
        title = selected_movie_details['title']
        rating = selected_movie_details['rating']
        year = selected_movie_details['year']
        runtime = selected_movie_details['runtime']
        genres = selected_movie_details['genres']
        overview = selected_movie_details['overview'][:200]

        selected_info = f"""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; padding: 25px; color: white; margin-bottom: 20px;">
            <div style="display: flex; align-items: center; gap: 20px; flex-wrap: wrap;">
                <img src="{poster_url}" style="width: 120px; height: 180px; object-fit: cover; border-radius: 15px; box-shadow: 0 8px 16px rgba(0,0,0,0.3);" alt="{movie_name}">
                <div style="flex: 1; min-width: 300px;">
                    <h2 style="margin: 0 0 10px 0; font-size: 28px; font-weight: bold;">{title}</h2>
                    <p style="margin: 5px 0; font-size: 16px;">⭐ {rating}/10 | {year} | {runtime}</p>
                    <p style="margin: 10px 0; font-size: 14px; opacity: 0.9;">{genres}</p>
                    <p style="margin: 15px 0 0 0; font-size: 14px; line-height: 1.5; opacity: 0.95;">{overview}...</p>
                </div>
            </div>
        </div>
        """

        # Create recommendations HTML
        recommendations_html = f'<div style="margin-top: 20px;"><h3 style="color: #1e293b; margin-bottom: 20px; text-align: center;">🎬 Top 5 Recommendations for "{movie_name}"</h3><div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; padding: 20px; background: #f8fafc; border-radius: 15px;">'

        for i in distances[1:6]:
            movie_title = new.iloc[i[0]].title
            similarity_score = round(i[1] * 100, 2)
            movie_details = get_movie_details(movie_title)

            rec_poster = movie_details['poster_url']
            rec_rating = movie_details['rating']
            rec_year = movie_details['year']
            rec_genres = movie_details['genres']

            recommendations_html += f"""
            <div style="background: white; border-radius: 15px; padding: 15px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); transition: transform 0.3s ease; border: 1px solid #e2e8f0;">
                <img src="{rec_poster}" style="width: 100%; height: 250px; object-fit: cover; border-radius: 10px; margin-bottom: 10px;" alt="{movie_title}">
                <h4 style="margin: 10px 0 5px 0; color: #1e293b; font-size: 14px; font-weight: bold; height: 40px; display: flex; align-items: center;">{movie_title}</h4>
                <p style="margin: 5px 0; color: #64748b; font-size: 12px;">⭐ {rec_rating}/10 | {rec_year}</p>
                <p style="margin: 5px 0; color: #10b981; font-size: 12px; font-weight: bold;">Similarity: {similarity_score}%</p>
                <p style="margin: 5px 0; color: #6b7280; font-size: 11px; height: 30px; overflow: hidden;">{rec_genres}</p>
            </div>
            """

        recommendations_html += '</div></div>'

        final_output = selected_info + recommendations_html

        return selected_movie_details['poster_url'], final_output, f"✅ Found 5 similar movies for '{movie_name}'"

    except Exception as e:
        return None, f"Error generating recommendations: {str(e)}", "❌ Error occurred"

# Search function for movies
def search_movies(query):
    """Search movies by title"""
    if not query:
        return "Enter a movie title to search..."

    matches = new[new['title'].str.contains(query, case=False, na=False)]['title'].tolist()

    if not matches:
        return f"No movies found for '{query}'"

    # Display search results
    results_html = f'<div style="margin-top: 20px;"><h4 style="color: #1e293b; margin-bottom: 15px;">🔍 Found {len(matches)} movies for "{query}":</h4><div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 15px;">'

    for movie in matches[:12]:  # Show max 12 results
        movie_details = get_movie_details(movie)
        movie_poster = movie_details['poster_url']
        movie_rating = movie_details['rating']
        movie_year = movie_details['year']
        movie_genres = movie_details['genres']

        results_html += f"""
        <div style="background: white; border: 1px solid #e2e8f0; border-radius: 10px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <img src="{movie_poster}" style="width: 100%; height: 200px; object-fit: cover; border-radius: 8px; margin-bottom: 10px;" alt="{movie}">
            <h5 style="margin: 0 0 5px 0; color: #1e293b; font-size: 14px; font-weight: bold;">{movie}</h5>
            <p style="margin: 2px 0; color: #64748b; font-size: 12px;">⭐ {movie_rating}/10 | {movie_year}</p>
            <p style="margin: 5px 0 0 0; color: #6b7280; font-size: 11px;">{movie_genres}</p>
        </div>
        """

    results_html += '</div></div>'
    return results_html

# Create the main interface
def create_movie_interface():
    # Get list of movies for dropdown
    movie_list = sorted(new['title'].tolist())

    # Custom CSS
    css = """
    .gradio-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;
        max-width: 1200px !important;
        margin: 0 auto !important;
    }
    .gr-button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        border: none !important;
        color: white !important;
        font-weight: bold !important;
        border-radius: 10px !important;
        padding: 12px 24px !important;
    }
    """

    with gr.Blocks(css=css, title="🎬 Movie Recommendation System") as interface:

        # Header
        header_html = """
        <div style="text-align: center; padding: 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; margin-bottom: 30px; box-shadow: 0 10px 25px rgba(0,0,0,0.1);">
            <h1 style="color: white; font-size: 48px; margin: 0; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
                🎬 Movie Recommendation System
            </h1>
            <p style="color: white; font-size: 18px; margin: 10px 0 0 0; opacity: 0.9;">
                Discover your next favorite movie with AI-powered recommendations
            </p>
        </div>
        """
        gr.HTML(header_html)

        with gr.Tab("🎯 Get Recommendations"):
            with gr.Row():
                with gr.Column(scale=1):
                    gr.HTML("<h3 style='color: #1e293b; margin-bottom: 15px;'>📽️ Select a Movie</h3>")

                    # Using basic Dropdown without unsupported parameters
                    movie_dropdown = gr.Dropdown(
                        choices=movie_list,
                        label="Choose from 5000+ movies",
                        value="Avatar"
                    )

                    recommend_btn = gr.Button(
                        "🎯 Get Recommendations",
                        variant="primary"
                    )

                    # Status display
                    status_display = gr.HTML()

                    # Database stats
                    stats_html = f"""
                    <div style="background: #f1f5f9; padding: 20px; border-radius: 15px; margin-top: 20px; border: 1px solid #e2e8f0;">
                        <h4 style="color: #334155; margin: 0 0 15px 0; text-align: center;">📊 Database Stats</h4>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; text-align: center;">
                            <div>
                                <p style="margin: 5px 0; color: #1e293b; font-size: 24px; font-weight: bold;">{len(new):,}</p>
                                <p style="margin: 0; color: #64748b; font-size: 12px;">Total Movies</p>
                            </div>
                            <div>
                                <p style="margin: 5px 0; color: #1e293b; font-size: 24px; font-weight: bold;">{vector.shape[1]:,}</p>
                                <p style="margin: 0; color: #64748b; font-size: 12px;">Features</p>
                            </div>
                        </div>
                    </div>
                    """
                    gr.HTML(stats_html)

                with gr.Column(scale=1):
                    selected_poster = gr.Image(
                        label="Selected Movie Poster",
                        height=400
                    )

            # Results display
            with gr.Row():
                recommendations_output = gr.HTML(label="Movie Details & Recommendations")

        with gr.Tab("🔍 Search Movies"):
            gr.HTML("<h3 style='color: #1e293b; margin-bottom: 20px;'>🎯 Search Movie Database</h3>")

            with gr.Row():
                search_input = gr.Textbox(
                    label="Search Movies",
                    placeholder="Enter movie title to search...",
                    lines=1
                )
                search_btn = gr.Button("🔍 Search", variant="secondary")

            search_results = gr.HTML()

        with gr.Tab("📊 About System"):
            about_html = f"""
            <div style="padding: 20px;">
                <h3 style="color: #1e293b; margin-bottom: 25px;">🤖 How the Recommendation System Works</h3>

                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 25px; margin-bottom: 30px;">
                    <div style="background: linear-gradient(135deg, #3b82f6, #1e40af); color: white; padding: 25px; border-radius: 15px; text-align: center;">
                        <h4 style="margin: 0 0 15px 0; font-size: 20px;">📚 Dataset</h4>
                        <p style="font-size: 36px; font-weight: bold; margin: 10px 0;">{len(new):,}</p>
                        <p style="margin: 0; opacity: 0.9;">Movies Available</p>
                    </div>

                    <div style="background: linear-gradient(135deg, #10b981, #047857); color: white; padding: 25px; border-radius: 15px; text-align: center;">
                        <h4 style="margin: 0 0 15px 0; font-size: 20px;">🔍 Features</h4>
                        <p style="font-size: 36px; font-weight: bold; margin: 10px 0;">{vector.shape[1]:,}</p>
                        <p style="margin: 0; opacity: 0.9;">Unique Features</p>
                    </div>

                    <div style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white; padding: 25px; border-radius: 15px; text-align: center;">
                        <h4 style="margin: 0 0 15px 0; font-size: 20px;">⚡ Algorithm</h4>
                        <p style="font-size: 20px; font-weight: bold; margin: 10px 0;">Cosine Similarity</p>
                        <p style="margin: 0; opacity: 0.9;">Content-Based Filtering</p>
                    </div>
                </div>

                <div style="background: white; border: 2px solid #e2e8f0; border-radius: 15px; padding: 25px;">
                    <h4 style="color: #1e293b; margin: 0 0 20px 0;">🛠️ Process Flow</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                        <div style="text-align: center; padding: 15px;">
                            <div style="background: #ddd6fe; width: 60px; height: 60px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 15px auto; font-size: 24px;">📝</div>
                            <h5 style="color: #1e293b; margin: 0 0 10px 0;">Data Processing</h5>
                            <p style="color: #64748b; font-size: 14px; line-height: 1.4;">Extract and clean movie metadata including genres, cast, crew, and keywords</p>
                        </div>
                        <div style="text-align: center; padding: 15px;">
                            <div style="background: #bfdbfe; width: 60px; height: 60px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 15px auto; font-size: 24px;">🔢</div>
                            <h5 style="color: #1e293b; margin: 0 0 10px 0;">Vectorization</h5>
                            <p style="color: #64748b; font-size: 14px; line-height: 1.4;">Convert text features into numerical vectors using CountVectorizer</p>
                        </div>
                        <div style="text-align: center; padding: 15px;">
                            <div style="background: #bbf7d0; width: 60px; height: 60px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 15px auto; font-size: 24px;">📐</div>
                            <h5 style="color: #1e293b; margin: 0 0 10px 0;">Similarity</h5>
                            <p style="color: #64748b; font-size: 14px; line-height: 1.4;">Calculate cosine similarity between all movie pairs</p>
                        </div>
                        <div style="text-align: center; padding: 15px;">
                            <div style="background: #fed7aa; width: 60px; height: 60px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 15px auto; font-size: 24px;">🎯</div>
                            <h5 style="color: #1e293b; margin: 0 0 10px 0;">Recommendations</h5>
                            <p style="color: #64748b; font-size: 14px; line-height: 1.4;">Return top 5 most similar movies based on content</p>
                        </div>
                    </div>
                </div>

                <div style="background: #f8fafc; border-radius: 10px; padding: 20px; margin-top: 20px; border-left: 4px solid #3b82f6;">
                    <h5 style="color: #1e293b; margin: 0 0 10px 0;">💡 Features Used for Recommendations:</h5>
                    <ul style="color: #64748b; margin: 0; padding-left: 20px;">
                        <li>Movie genres (Action, Drama, Comedy, etc.)</li>
                        <li>Plot keywords and themes</li>
                        <li>Main cast members (top 3 actors)</li>
                        <li>Director information</li>
                        <li>Movie overview and description</li>
                    </ul>
                </div>
            </div>
            """
            gr.HTML(about_html)

        # Event handlers
        recommend_btn.click(
            enhanced_recommend,
            inputs=[movie_dropdown],
            outputs=[selected_poster, recommendations_output, status_display]
        )

        search_btn.click(
            search_movies,
            inputs=[search_input],
            outputs=[search_results]
        )

        # Auto-update when dropdown changes
        movie_dropdown.change(
            enhanced_recommend,
            inputs=[movie_dropdown],
            outputs=[selected_poster, recommendations_output, status_display]
        )

        # Load initial recommendation
        interface.load(
            lambda: enhanced_recommend("Avatar"),
            outputs=[selected_poster, recommendations_output, status_display]
        )

    return interface

# Launch the interface
print("🚀 Launching Enhanced Movie Recommendation System...")
app = create_movie_interface()
app.launch(
    share=True,
    show_error=True,
    height=800
)